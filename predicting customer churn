# %%
# Importing necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE

# %%
# Loading the dataset
df = pd.read_csv('Telco-Customer-Churn.csv')

# %%
# Data Preprocessing
# Dropping 'customerID' column as it's not needed
df.drop(columns=['customerID'], inplace=True)

# Converting 'TotalCharges' to numeric, coercing errors to NaN
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# Filling missing values with the median
df.fillna(df.median(), inplace=True)

# Encoding categorical variables using one-hot encoding
df = pd.get_dummies(df, drop_first=True)

# %%
# Splitting the dataset into features and target variable
X = df.drop(columns=['Churn_Yes'])
y = df['Churn_Yes']

# %%
# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# %%
# Handling class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

# %%
# Scaling the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_balanced)
X_test_scaled = scaler.transform(X_test)

# %%
# Training the Random Forest Classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train_balanced)

# %%
# Making predictions
y_pred = rf.predict(X_test_scaled)

# %%
# Evaluating the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
